/**
 * OpenAPI C3D-Service
 * Open API спецификация к REST API микросервиса C3D Web Vision.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: info@c3dlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "c3dservice-api/model/Times.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Times::Times()
{
    m_Created = utility::datetime();
    m_CreatedIsSet = false;
    m_Updated = utility::datetime();
    m_UpdatedIsSet = false;
    m_Expired = utility::datetime();
    m_ExpiredIsSet = false;
}

Times::~Times()
{
}

void Times::validate()
{
    // TODO: implement validation
}

web::json::value Times::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CreatedIsSet)
    {
        val[utility::conversions::to_string_t(U("created"))] = ModelBase::toJson(m_Created);
    }
    if(m_UpdatedIsSet)
    {
        val[utility::conversions::to_string_t(U("updated"))] = ModelBase::toJson(m_Updated);
    }
    if(m_ExpiredIsSet)
    {
        val[utility::conversions::to_string_t(U("expired"))] = ModelBase::toJson(m_Expired);
    }

    return val;
}

bool Times::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("created"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreated;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreated);
            setCreated(refVal_setCreated);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updated"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updated")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setUpdated;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdated);
            setUpdated(refVal_setUpdated);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expired"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expired")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setExpired;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpired);
            setExpired(refVal_setExpired);
        }
    }
    return ok;
}

void Times::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created")), m_Created));
    }
    if(m_UpdatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updated")), m_Updated));
    }
    if(m_ExpiredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expired")), m_Expired));
    }
}

bool Times::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("created"))))
    {
        utility::datetime refVal_setCreated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created"))), refVal_setCreated );
        setCreated(refVal_setCreated);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updated"))))
    {
        utility::datetime refVal_setUpdated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updated"))), refVal_setUpdated );
        setUpdated(refVal_setUpdated);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expired"))))
    {
        utility::datetime refVal_setExpired;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expired"))), refVal_setExpired );
        setExpired(refVal_setExpired);
    }
    return ok;
}

utility::datetime Times::getCreated() const
{
    return m_Created;
}

void Times::setCreated(const utility::datetime& value)
{
    m_Created = value;
    m_CreatedIsSet = true;
}

bool Times::createdIsSet() const
{
    return m_CreatedIsSet;
}

void Times::unsetCreated()
{
    m_CreatedIsSet = false;
}
utility::datetime Times::getUpdated() const
{
    return m_Updated;
}

void Times::setUpdated(const utility::datetime& value)
{
    m_Updated = value;
    m_UpdatedIsSet = true;
}

bool Times::updatedIsSet() const
{
    return m_UpdatedIsSet;
}

void Times::unsetUpdated()
{
    m_UpdatedIsSet = false;
}
utility::datetime Times::getExpired() const
{
    return m_Expired;
}

void Times::setExpired(const utility::datetime& value)
{
    m_Expired = value;
    m_ExpiredIsSet = true;
}

bool Times::expiredIsSet() const
{
    return m_ExpiredIsSet;
}

void Times::unsetExpired()
{
    m_ExpiredIsSet = false;
}
}
}
}
}


