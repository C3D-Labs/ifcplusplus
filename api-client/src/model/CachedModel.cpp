/**
 * OpenAPI C3D-Service
 * Open API спецификация к REST API микросервиса C3D Web Vision.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: info@c3dlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "c3dservice-api/model/CachedModel.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CachedModel::CachedModel()
{
    m_Url = utility::conversions::to_string_t("");
    m_UrlIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_Progress = 0.0;
    m_ProgressIsSet = false;
}

CachedModel::~CachedModel()
{
}

void CachedModel::validate()
{
    // TODO: implement validation
}

web::json::value CachedModel::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_UrlIsSet)
    {
        val[utility::conversions::to_string_t(U("url"))] = ModelBase::toJson(m_Url);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_ProgressIsSet)
    {
        val[utility::conversions::to_string_t(U("progress"))] = ModelBase::toJson(m_Progress);
    }

    return val;
}

bool CachedModel::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUrl);
            setUrl(refVal_setUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("progress"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("progress")));
        if(!fieldValue.is_null())
        {
            double refVal_setProgress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProgress);
            setProgress(refVal_setProgress);
        }
    }
    return ok;
}

void CachedModel::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("url")), m_Url));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_ProgressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("progress")), m_Progress));
    }
}

bool CachedModel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("url"))))
    {
        utility::string_t refVal_setUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("url"))), refVal_setUrl );
        setUrl(refVal_setUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("progress"))))
    {
        double refVal_setProgress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("progress"))), refVal_setProgress );
        setProgress(refVal_setProgress);
    }
    return ok;
}

utility::string_t CachedModel::getUrl() const
{
    return m_Url;
}

void CachedModel::setUrl(const utility::string_t& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}

bool CachedModel::urlIsSet() const
{
    return m_UrlIsSet;
}

void CachedModel::unsetUrl()
{
    m_UrlIsSet = false;
}
utility::string_t CachedModel::getStatus() const
{
    return m_Status;
}

void CachedModel::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool CachedModel::statusIsSet() const
{
    return m_StatusIsSet;
}

void CachedModel::unsetStatus()
{
    m_StatusIsSet = false;
}
double CachedModel::getProgress() const
{
    return m_Progress;
}

void CachedModel::setProgress(double value)
{
    m_Progress = value;
    m_ProgressIsSet = true;
}

bool CachedModel::progressIsSet() const
{
    return m_ProgressIsSet;
}

void CachedModel::unsetProgress()
{
    m_ProgressIsSet = false;
}
}
}
}
}


