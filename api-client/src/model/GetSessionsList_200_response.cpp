/**
 * OpenAPI C3D-Service
 * Open API спецификация к REST API микросервиса C3D Web Vision.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: info@c3dlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "c3dservice-api/model/GetSessionsList_200_response.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GetSessionsList_200_response::GetSessionsList_200_response()
{
    m_UsersIsSet = false;
    m_WorkspacesIsSet = false;
}

GetSessionsList_200_response::~GetSessionsList_200_response()
{
}

void GetSessionsList_200_response::validate()
{
    // TODO: implement validation
}

web::json::value GetSessionsList_200_response::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_UsersIsSet)
    {
        val[utility::conversions::to_string_t(U("users"))] = ModelBase::toJson(m_Users);
    }
    if(m_WorkspacesIsSet)
    {
        val[utility::conversions::to_string_t(U("workspaces"))] = ModelBase::toJson(m_Workspaces);
    }

    return val;
}

bool GetSessionsList_200_response::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("users"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("users")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<utility::string_t>> refVal_setUsers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUsers);
            setUsers(refVal_setUsers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("workspaces"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("workspaces")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<utility::string_t>> refVal_setWorkspaces;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWorkspaces);
            setWorkspaces(refVal_setWorkspaces);
        }
    }
    return ok;
}

void GetSessionsList_200_response::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_UsersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("users")), m_Users));
    }
    if(m_WorkspacesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("workspaces")), m_Workspaces));
    }
}

bool GetSessionsList_200_response::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("users"))))
    {
        std::vector<std::shared_ptr<utility::string_t>> refVal_setUsers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("users"))), refVal_setUsers );
        setUsers(refVal_setUsers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("workspaces"))))
    {
        std::vector<std::shared_ptr<utility::string_t>> refVal_setWorkspaces;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("workspaces"))), refVal_setWorkspaces );
        setWorkspaces(refVal_setWorkspaces);
    }
    return ok;
}

std::vector<std::shared_ptr<utility::string_t>>& GetSessionsList_200_response::getUsers()
{
    return m_Users;
}

void GetSessionsList_200_response::setUsers(const std::vector<std::shared_ptr<utility::string_t>>& value)
{
    m_Users = value;
    m_UsersIsSet = true;
}

bool GetSessionsList_200_response::usersIsSet() const
{
    return m_UsersIsSet;
}

void GetSessionsList_200_response::unsetUsers()
{
    m_UsersIsSet = false;
}
std::vector<std::shared_ptr<utility::string_t>>& GetSessionsList_200_response::getWorkspaces()
{
    return m_Workspaces;
}

void GetSessionsList_200_response::setWorkspaces(const std::vector<std::shared_ptr<utility::string_t>>& value)
{
    m_Workspaces = value;
    m_WorkspacesIsSet = true;
}

bool GetSessionsList_200_response::workspacesIsSet() const
{
    return m_WorkspacesIsSet;
}

void GetSessionsList_200_response::unsetWorkspaces()
{
    m_WorkspacesIsSet = false;
}
}
}
}
}


