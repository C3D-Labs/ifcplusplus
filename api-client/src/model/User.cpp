/**
 * OpenAPI C3D-Service
 * Open API спецификация к REST API микросервиса C3D Web Vision.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: info@c3dlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "c3dservice-api/model/User.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



User::User()
{
    m_Uuid = utility::conversions::to_string_t("");
    m_UuidIsSet = false;
    m_TimesIsSet = false;
}

User::~User()
{
}

void User::validate()
{
    // TODO: implement validation
}

web::json::value User::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_UuidIsSet)
    {
        val[utility::conversions::to_string_t(U("uuid"))] = ModelBase::toJson(m_Uuid);
    }
    if(m_TimesIsSet)
    {
        val[utility::conversions::to_string_t(U("times"))] = ModelBase::toJson(m_Times);
    }

    return val;
}

bool User::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("uuid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uuid")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUuid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUuid);
            setUuid(refVal_setUuid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("times"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("times")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Times> refVal_setTimes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimes);
            setTimes(refVal_setTimes);
        }
    }
    return ok;
}

void User::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_UuidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uuid")), m_Uuid));
    }
    if(m_TimesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("times")), m_Times));
    }
}

bool User::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("uuid"))))
    {
        utility::string_t refVal_setUuid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uuid"))), refVal_setUuid );
        setUuid(refVal_setUuid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("times"))))
    {
        std::shared_ptr<Times> refVal_setTimes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("times"))), refVal_setTimes );
        setTimes(refVal_setTimes);
    }
    return ok;
}

utility::string_t User::getUuid() const
{
    return m_Uuid;
}

void User::setUuid(const utility::string_t& value)
{
    m_Uuid = value;
    m_UuidIsSet = true;
}

bool User::uuidIsSet() const
{
    return m_UuidIsSet;
}

void User::unsetUuid()
{
    m_UuidIsSet = false;
}
std::shared_ptr<Times> User::getTimes() const
{
    return m_Times;
}

void User::setTimes(const std::shared_ptr<Times>& value)
{
    m_Times = value;
    m_TimesIsSet = true;
}

bool User::timesIsSet() const
{
    return m_TimesIsSet;
}

void User::unsetTimes()
{
    m_TimesIsSet = false;
}
}
}
}
}


