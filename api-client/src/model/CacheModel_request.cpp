/**
 * OpenAPI C3D-Service
 * Open API спецификация к REST API микросервиса C3D Web Vision.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: info@c3dlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "c3dservice-api/model/CacheModel_request.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CacheModel_request::CacheModel_request()
{
    m_Url = utility::conversions::to_string_t("");
    m_UrlIsSet = false;
    m_ExtensionsIsSet = false;
    m_FileContentIsSet = false;
}

CacheModel_request::~CacheModel_request()
{
}

void CacheModel_request::validate()
{
    // TODO: implement validation
}

web::json::value CacheModel_request::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_UrlIsSet)
    {
        val[utility::conversions::to_string_t(U("url"))] = ModelBase::toJson(m_Url);
    }
    if(m_ExtensionsIsSet)
    {
        val[utility::conversions::to_string_t(U("extensions"))] = ModelBase::toJson(m_Extensions);
    }
    if(m_FileContentIsSet)
    {
        val[utility::conversions::to_string_t(U("fileContent"))] = ModelBase::toJson(m_FileContent);
    }

    return val;
}

bool CacheModel_request::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUrl);
            setUrl(refVal_setUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("extensions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("extensions")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setExtensions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExtensions);
            setExtensions(refVal_setExtensions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fileContent"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fileContent")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFileContent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFileContent);
            setFileContent(refVal_setFileContent);
        }
    }
    return ok;
}

void CacheModel_request::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("url")), m_Url));
    }
    if(m_ExtensionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("extensions")), m_Extensions));
    }
    if(m_FileContentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fileContent")), m_FileContent));
    }
}

bool CacheModel_request::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("url"))))
    {
        utility::string_t refVal_setUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("url"))), refVal_setUrl );
        setUrl(refVal_setUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("extensions"))))
    {
        std::vector<utility::string_t> refVal_setExtensions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("extensions"))), refVal_setExtensions );
        setExtensions(refVal_setExtensions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fileContent"))))
    {
        utility::string_t refVal_setFileContent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fileContent"))), refVal_setFileContent );
        setFileContent(refVal_setFileContent);
    }
    return ok;
}

utility::string_t CacheModel_request::getUrl() const
{
    return m_Url;
}

void CacheModel_request::setUrl(const utility::string_t& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}

bool CacheModel_request::urlIsSet() const
{
    return m_UrlIsSet;
}

void CacheModel_request::unsetUrl()
{
    m_UrlIsSet = false;
}
std::vector<utility::string_t>& CacheModel_request::getExtensions()
{
    return m_Extensions;
}

void CacheModel_request::setExtensions(const std::vector<utility::string_t>& value)
{
    m_Extensions = value;
    m_ExtensionsIsSet = true;
}

bool CacheModel_request::extensionsIsSet() const
{
    return m_ExtensionsIsSet;
}

void CacheModel_request::unsetExtensions()
{
    m_ExtensionsIsSet = false;
}
utility::string_t CacheModel_request::getFileContent() const
{
    return m_FileContent;
}

void CacheModel_request::setFileContent(const utility::string_t& value)
{
    m_FileContent = value;
    m_FileContentIsSet = true;
}

bool CacheModel_request::fileContentIsSet() const
{
    return m_FileContentIsSet;
}

void CacheModel_request::unsetFileContent()
{
    m_FileContentIsSet = false;
}
}
}
}
}


