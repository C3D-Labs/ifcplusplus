/**
 * OpenAPI C3D-Service
 * Open API спецификация к REST API микросервиса C3D Web Vision.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: info@c3dlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "c3dservice-api/model/GeometryLocation.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GeometryLocation::GeometryLocation()
{
    m_Position = utility::conversions::to_string_t("");
    m_PositionIsSet = false;
    m_Rotation = utility::conversions::to_string_t("");
    m_RotationIsSet = false;
    m_Scale = utility::conversions::to_string_t("");
    m_ScaleIsSet = false;
}

GeometryLocation::~GeometryLocation()
{
}

void GeometryLocation::validate()
{
    // TODO: implement validation
}

web::json::value GeometryLocation::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PositionIsSet)
    {
        val[utility::conversions::to_string_t(U("position"))] = ModelBase::toJson(m_Position);
    }
    if(m_RotationIsSet)
    {
        val[utility::conversions::to_string_t(U("rotation"))] = ModelBase::toJson(m_Rotation);
    }
    if(m_ScaleIsSet)
    {
        val[utility::conversions::to_string_t(U("scale"))] = ModelBase::toJson(m_Scale);
    }

    return val;
}

bool GeometryLocation::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("position"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("position")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPosition;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPosition);
            setPosition(refVal_setPosition);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rotation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rotation")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRotation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRotation);
            setRotation(refVal_setRotation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("scale"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("scale")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setScale;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScale);
            setScale(refVal_setScale);
        }
    }
    return ok;
}

void GeometryLocation::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PositionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("position")), m_Position));
    }
    if(m_RotationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rotation")), m_Rotation));
    }
    if(m_ScaleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("scale")), m_Scale));
    }
}

bool GeometryLocation::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("position"))))
    {
        utility::string_t refVal_setPosition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("position"))), refVal_setPosition );
        setPosition(refVal_setPosition);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rotation"))))
    {
        utility::string_t refVal_setRotation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rotation"))), refVal_setRotation );
        setRotation(refVal_setRotation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("scale"))))
    {
        utility::string_t refVal_setScale;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("scale"))), refVal_setScale );
        setScale(refVal_setScale);
    }
    return ok;
}

utility::string_t GeometryLocation::getPosition() const
{
    return m_Position;
}

void GeometryLocation::setPosition(const utility::string_t& value)
{
    m_Position = value;
    m_PositionIsSet = true;
}

bool GeometryLocation::positionIsSet() const
{
    return m_PositionIsSet;
}

void GeometryLocation::unsetPosition()
{
    m_PositionIsSet = false;
}
utility::string_t GeometryLocation::getRotation() const
{
    return m_Rotation;
}

void GeometryLocation::setRotation(const utility::string_t& value)
{
    m_Rotation = value;
    m_RotationIsSet = true;
}

bool GeometryLocation::rotationIsSet() const
{
    return m_RotationIsSet;
}

void GeometryLocation::unsetRotation()
{
    m_RotationIsSet = false;
}
utility::string_t GeometryLocation::getScale() const
{
    return m_Scale;
}

void GeometryLocation::setScale(const utility::string_t& value)
{
    m_Scale = value;
    m_ScaleIsSet = true;
}

bool GeometryLocation::scaleIsSet() const
{
    return m_ScaleIsSet;
}

void GeometryLocation::unsetScale()
{
    m_ScaleIsSet = false;
}
}
}
}
}


