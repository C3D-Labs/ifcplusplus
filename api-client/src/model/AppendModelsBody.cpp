/**
 * OpenAPI C3D-Service
 * Open API спецификация к REST API микросервиса C3D Web Vision.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: info@c3dlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "c3dservice-api/model/AppendModelsBody.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AppendModelsBody::AppendModelsBody()
{
    m_WithCleaning = false;
    m_WithCleaningIsSet = false;
    m_ModelsIsSet = false;
}

AppendModelsBody::~AppendModelsBody()
{
}

void AppendModelsBody::validate()
{
    // TODO: implement validation
}

web::json::value AppendModelsBody::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_WithCleaningIsSet)
    {
        val[utility::conversions::to_string_t(U("withCleaning"))] = ModelBase::toJson(m_WithCleaning);
    }
    if(m_ModelsIsSet)
    {
        val[utility::conversions::to_string_t(U("models"))] = ModelBase::toJson(m_Models);
    }

    return val;
}

bool AppendModelsBody::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("withCleaning"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("withCleaning")));
        if(!fieldValue.is_null())
        {
            bool refVal_setWithCleaning;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWithCleaning);
            setWithCleaning(refVal_setWithCleaning);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("models"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("models")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setModels;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModels);
            setModels(refVal_setModels);
        }
    }
    return ok;
}

void AppendModelsBody::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_WithCleaningIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("withCleaning")), m_WithCleaning));
    }
    if(m_ModelsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("models")), m_Models));
    }
}

bool AppendModelsBody::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("withCleaning"))))
    {
        bool refVal_setWithCleaning;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("withCleaning"))), refVal_setWithCleaning );
        setWithCleaning(refVal_setWithCleaning);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("models"))))
    {
        std::vector<utility::string_t> refVal_setModels;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("models"))), refVal_setModels );
        setModels(refVal_setModels);
    }
    return ok;
}

bool AppendModelsBody::isWithCleaning() const
{
    return m_WithCleaning;
}

void AppendModelsBody::setWithCleaning(bool value)
{
    m_WithCleaning = value;
    m_WithCleaningIsSet = true;
}

bool AppendModelsBody::withCleaningIsSet() const
{
    return m_WithCleaningIsSet;
}

void AppendModelsBody::unsetWithCleaning()
{
    m_WithCleaningIsSet = false;
}
std::vector<utility::string_t>& AppendModelsBody::getModels()
{
    return m_Models;
}

void AppendModelsBody::setModels(const std::vector<utility::string_t>& value)
{
    m_Models = value;
    m_ModelsIsSet = true;
}

bool AppendModelsBody::modelsIsSet() const
{
    return m_ModelsIsSet;
}

void AppendModelsBody::unsetModels()
{
    m_ModelsIsSet = false;
}
}
}
}
}


