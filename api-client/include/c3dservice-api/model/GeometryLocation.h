/**
 * OpenAPI C3D-Service
 * Open API спецификация к REST API микросервиса C3D Web Vision.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: info@c3dlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GeometryLocation.h
 *
 * Описание пространственной трансформации
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_GeometryLocation_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_GeometryLocation_H_


#include "c3dservice-api/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Описание пространственной трансформации
/// </summary>
class  GeometryLocation
    : public ModelBase
{
public:
    GeometryLocation();
    virtual ~GeometryLocation();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// GeometryLocation members

    /// <summary>
    /// Координаты вектора смещения в формате &#39;0.0000;0.0000;0.0000&#39;
    /// </summary>
    utility::string_t getPosition() const;
    bool positionIsSet() const;
    void unsetPosition();

    void setPosition(const utility::string_t& value);

    /// <summary>
    /// Уголы поворота в радианах вокруг осей в формате &#39;0.0;0.0;0.0&#39;
    /// </summary>
    utility::string_t getRotation() const;
    bool rotationIsSet() const;
    void unsetRotation();

    void setRotation(const utility::string_t& value);

    /// <summary>
    /// Коэффициенты масштабирования по осям в формате &#39;1.0;1.0;1.0&#39;
    /// </summary>
    utility::string_t getScale() const;
    bool scaleIsSet() const;
    void unsetScale();

    void setScale(const utility::string_t& value);


protected:
    utility::string_t m_Position;
    bool m_PositionIsSet;
    utility::string_t m_Rotation;
    bool m_RotationIsSet;
    utility::string_t m_Scale;
    bool m_ScaleIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_GeometryLocation_H_ */
