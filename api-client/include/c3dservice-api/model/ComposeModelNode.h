/**
 * OpenAPI C3D-Service
 * Open API спецификация к REST API микросервиса C3D Web Vision.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: info@c3dlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComposeModelNode.h
 *
 * Узел сборки модели
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComposeModelNode_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComposeModelNode_H_


#include "c3dservice-api/ModelBase.h"

#include "c3dservice-api/model/GeometryLocation.h"
#include "c3dservice-api/model/ComposeModelNode.h"
#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class GeometryLocation;

/// <summary>
/// Узел сборки модели
/// </summary>
class  ComposeModelNode
    : public ModelBase
{
public:
    ComposeModelNode();
    virtual ~ComposeModelNode();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComposeModelNode members

    /// <summary>
    /// Идентификатор узла
    /// </summary>
    utility::string_t getUuid() const;
    bool uuidIsSet() const;
    void unsetUuid();

    void setUuid(const utility::string_t& value);

    /// <summary>
    /// Атрибуты узла сборки
    /// </summary>
    std::map<utility::string_t, utility::string_t>& getAttrs();
    bool attrsIsSet() const;
    void unsetAttrs();

    void setAttrs(const std::map<utility::string_t, utility::string_t>& value);

    /// <summary>
    /// Отображать ли узел
    /// </summary>
    bool isVisibility() const;
    bool visibilityIsSet() const;
    void unsetVisibility();

    void setVisibility(bool value);

    /// <summary>
    /// Uuid кеша геометрии
    /// </summary>
    utility::string_t getRepresentation() const;
    bool representationIsSet() const;
    void unsetRepresentation();

    void setRepresentation(const utility::string_t& value);

    /// <summary>
    /// Дочерние узлы
    /// </summary>
    std::vector<std::shared_ptr<ComposeModelNode>>& getChildren();
    bool childrenIsSet() const;
    void unsetChildren();

    void setChildren(const std::vector<std::shared_ptr<ComposeModelNode>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GeometryLocation> getLocation() const;
    bool locationIsSet() const;
    void unsetLocation();

    void setLocation(const std::shared_ptr<GeometryLocation>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<float>& getMatrix();
    bool matrixIsSet() const;
    void unsetMatrix();

    void setMatrix(std::vector<float> value);


protected:
    utility::string_t m_Uuid;
    bool m_UuidIsSet;
    std::map<utility::string_t, utility::string_t> m_Attrs;
    bool m_AttrsIsSet;
    bool m_Visibility;
    bool m_VisibilityIsSet;
    utility::string_t m_Representation;
    bool m_RepresentationIsSet;
    std::vector<std::shared_ptr<ComposeModelNode>> m_Children;
    bool m_ChildrenIsSet;
    std::shared_ptr<GeometryLocation> m_Location;
    bool m_LocationIsSet;
    std::vector<float> m_Matrix;
    bool m_MatrixIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComposeModelNode_H_ */
