/**
 * OpenAPI C3D-Service
 * Open API спецификация к REST API микросервиса C3D Web Vision.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: info@c3dlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SessionApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_SessionApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_SessionApi_H_



#include "c3dservice-api/ApiClient.h"

#include "c3dservice-api/model/AppendModelsBody.h"
#include "c3dservice-api/model/CreateWorkspace_200_response.h"
#include "c3dservice-api/model/GetSessionsList_200_response.h"
#include "c3dservice-api/model/RemoveModels_request.h"
#include "c3dservice-api/model/User.h"
#include "c3dservice-api/model/Workspace.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  SessionApi 
{
public:

    explicit SessionApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~SessionApi();

    /// <summary>
    /// Добаляет список моделей к рабочему пространству
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="uuid">Идентификатор рабочего пространства</param>
    /// <param name="data"></param>
    pplx::task<void> appendModels(
        utility::string_t uuid,
        std::shared_ptr<AppendModelsBody> data
    ) const;
    /// <summary>
    /// Создает новое рабочее пространство
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<CreateWorkspace_200_response>> createWorkspace(
    ) const;
    /// <summary>
    /// Возвращает список всех сессий текущего сервиса
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<GetSessionsList_200_response>> getSessionsList(
    ) const;
    /// <summary>
    /// Возвращает список активных пользователей
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<User>>> getUsersList(
    ) const;
    /// <summary>
    /// Возвращает параметры рабочего пространства
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="uuid">Идентификатор рабочего пространства</param>
    pplx::task<std::shared_ptr<Workspace>> getWorkspaceInfo(
        utility::string_t uuid
    ) const;
    /// <summary>
    /// Возвращает список активных рабочих пространств
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Workspace>>> getWorkspacesList(
    ) const;
    /// <summary>
    /// Удаляет список моделей из рабочего пространства
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="uuid">Идентификатор рабочего пространства</param>
    /// <param name="models"></param>
    pplx::task<void> removeModels(
        utility::string_t uuid,
        std::shared_ptr<RemoveModels_request> models
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_SessionApi_H_ */

